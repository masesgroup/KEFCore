# This is a basic workflow to help you get started with Actions

name: CI_BUILD

# Controls when the action will run. Triggers the workflow on push
# events but only for the master branch
on:
  push:
    # only trigger on branches, not on tags
    branches: '**'
    paths-ignore:
      - 'docs/**'
  workflow_dispatch:
    inputs:
      UseLastRepositoryBuildJNet:
        description: 'Use latest NuGet packages from JNet'
        required: false
        default: false
        type: boolean
      UseLastRepositoryBuildKNet:
        description: 'Use latest NuGet packages from KNet'
        required: false
        default: false
        type: boolean
      ForceContinueOnError:
        description: 'Force continue-on-error'
        required: false
        default: false
        type: boolean
      UploadServerLogs:
        description: 'Upload server logs'
        required: false
        default: false
        type: boolean
      EnableProcessDump:
        description: 'Enable .NET process dump'
        required: false
        default: '0'
        type: choice
        options:
          - "0"
          - "1"
      ProcessDumpType:
        description: '.NET process dump type'
        required: false
        default: '3'
        type: choice
        options:
          - "1"
          - "2"
          - "3"
          - "4"
      EnableVerboseDiagnosticProcessDump:
        description: 'Enables verbose diagnostic logging of the dump process'
        required: false
        default: '0'
        type: choice
        options:
          - "0"
          - "1"

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

# This workflow contains two jobs called "check_changes", "build_windows"
jobs:
  # Verify if a build is needed
  check_changes:
    name: Check changed files
    outputs:
      run_build_windows: ${{ steps.check_files.outputs.run_build_windows || steps.force_execute.outputs.run_build_windows }}
    runs-on: ubuntu-latest
    steps:
      - name: Force check on true
        id: force_execute
        if: ${{ github.event_name != 'push' }}
        run: echo "run_build_windows=true" >> $GITHUB_OUTPUT
      - name: Create modified file list
        id: get_changed_files
        if: ${{ github.event_name == 'push' }}
        uses: masesgroup/retrieve-changed-files@v3
        with:
          format: 'csv'
      - name: Check modified file list
        id: check_files
        if: ${{ github.event_name == 'push' }}
        run: |
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.get_changed_files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
              if [[ $added_modified_file == ".github/workflows/build.yaml"* ]]; then
                echo "$added_modified_file is myself."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/net/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "test/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
          done
      - name: Get run_build_windows
        run: echo "The selected run_build_windows is ${{ steps.check_files.outputs.run_build_windows || steps.force_execute.outputs.run_build_windows }}"

  # Now run "build_windows"
  build_windows:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    # The type of runner that the job will run on
    runs-on: windows-2022

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:   
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        run: git config --system core.longpaths true
    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with:
          fetch-depth: '1'
          submodules: 'true'

      - name: Get last workflow run of JNet
        if: ${{ inputs.UseLastRepositoryBuildJNet == true }}
        shell: bash
        run: echo "JNET_LAST_RUN=$(curl -sL https://api.github.com/repos/masesgroup/JNet/actions/workflows/build.yaml/runs | jq -r '.workflow_runs[0].id?')" >> $GITHUB_ENV

      - name: Download artifact
        if: ${{ inputs.UseLastRepositoryBuildJNet == true }}
        run: gh run download ${{ env.JNET_LAST_RUN }} --name JNetNuGet --repo masesgroup/JNet --dir JNetNuGet
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List NuGet packages downloaded
        if: ${{ inputs.UseLastRepositoryBuildJNet == true }}
        shell: cmd
        run: dir .\JNetNuGet\*nupkg

      - name: Add local repo
        if: ${{ success() && inputs.UseLastRepositoryBuildJNet == true }}
        run: dotnet nuget add source --name localJNetNuGet "${{ github.workspace }}\JNetNuGet\"

      - name: Get last workflow run of KNet
        if: ${{ inputs.UseLastRepositoryBuildKNet == true }}
        shell: bash
        run: echo "KNET_LAST_RUN=$(curl -sL https://api.github.com/repos/masesgroup/KNet/actions/workflows/build.yaml/runs | jq -r '.workflow_runs[0].id?')" >> $GITHUB_ENV

      - name: Download KNetNuGet artifact
        if: ${{ inputs.UseLastRepositoryBuildKNet == true }}
        run: gh run download ${{ env.KNET_LAST_RUN }} --name KNetNuGet --repo masesgroup/KNet --dir KNetNuGet
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List KNetNuGet packages downloaded
        if: ${{ inputs.UseLastRepositoryBuildKNet == true }}
        shell: cmd
        run: dir .\KNetNuGet\*nupkg

      - name: Add local repo
        if: ${{ success() && inputs.UseLastRepositoryBuildKNet == true }}
        run: dotnet nuget add source --name localKNetNuGet "${{ github.workspace }}\KNetNuGet\"

      - name: Recompile to create nuget packages
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" src\net\KEFCore.sln

      - name: List NuGet packages to avoid download of artifact
        shell: cmd
        run: dir .\bin\*nupkg

      - uses: actions/upload-artifact@v4
        with:
          name: KEFCoreNuGet
          path: .\bin\*nupkg

      - name: Compile tests
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" test\KEFCore.Test.sln

      - name: Prepare configuration files
        run: |
          Copy-Item .github\workflows\configuration\* -Destination bin\net8.0\ -Force
          Copy-Item .github\workflows\configuration\* -Destination bin\net9.0\ -Force

      - name: Save KEFCore net8.0 bin in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: ./bin/net8.0/
          key: KEFCore_${{ github.run_number }}_${{ github.run_attempt }}_net8.0_bin_${{ github.sha }}
          
      - name: Save KEFCore net9.0 bin in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: ./bin/net9.0/
          key: KEFCore_${{ github.run_number }}_${{ github.run_attempt }}_net9.0_bin_${{ github.sha }}
 
  execute_tests_linux:
    needs: build_windows
    services:
      kafka:
        # Private registry image
        image: ghcr.io/masesgroup/knet:V3.0.3.0 # to be changed with official version when will be available
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 9092:9092
        env:
          KNET_DOCKER_RUNNING_MODE: server-standalone
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ENCODED_2_6_2 }}
          
    strategy:
      fail-fast: false
      matrix:
        serialization: [ 'Json', 'Protobuf', 'Avro' ]
        os: [ 'ubuntu-latest' ]
        framework: [ 'net8.0', 'net9.0' ]
        jdk_vendor: [ 'temurin', 'zulu', 'microsoft', 'corretto', 'oracle' ]
        jdk_version: [ '17', '21' ] # only LTS versions
        
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_DbgEnableMiniDump: ${{ inputs.EnableProcessDump }}
      DOTNET_DbgMiniDumpType: ${{ inputs.ProcessDumpType }}
      DOTNET_DbgMiniDumpName: ${{ github.workspace }}/coredump.%p.dmp
      DOTNET_CreateDumpDiagnostics: ${{ inputs.EnableProcessDump }}
      DOTNET_CreateDumpVerboseDiagnostics: ${{ inputs.EnableVerboseDiagnosticProcessDump }}
      DOTNET_EnableCrashReport: ${{ inputs.EnableProcessDump }}
      DOTNET_CreateDumpLogToFile: ${{ github.workspace }}/coredump.diagnostic
      JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ENCODED_2_6_4 }}
      
    steps:
      - name: Restore KEFCore ${{ matrix.framework }} bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/${{ matrix.framework }}/
          key: KEFCore_${{ github.run_number }}_${{ github.run_attempt }}_${{ matrix.framework }}_bin_${{ github.sha }}
 
      - name: Set up JDK distribution
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}
          check-latest: true

      - uses: actions/setup-dotnet@v4
        if: ${{ matrix.framework == 'net9.0' }}
        with:
          dotnet-version: |
            9.x

      - name: Execute Benchmark.KafkaStreams.Raw on Ubuntu with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}/bin/${{ matrix.framework }}/Benchmark.KafkaStreams.Raw.json /p:Use${{ matrix.serialization }}=true

      - name: Execute Benchmark.KafkaStreams.Buffered on Ubuntu with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}/bin/${{ matrix.framework }}/Benchmark.KafkaStreams.Buffered.json /p:Use${{ matrix.serialization }}=true

      - name: Execute Benchmark.KNetStreams.Raw on Ubuntu with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}/bin/${{ matrix.framework }}/Benchmark.KNetStreams.Raw.json /p:Use${{ matrix.serialization }}=true

      - name: Execute Benchmark.KNetStreams.Raw.Prefetch on Ubuntu with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}/bin/${{ matrix.framework }}/Benchmark.KNetStreams.Raw.Prefetch.json /p:Use${{ matrix.serialization }}=true

      - name: Execute Benchmark.KNetStreams.Buffered on Ubuntu with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}/bin/${{ matrix.framework }}/Benchmark.KNetStreams.Buffered.json /p:Use${{ matrix.serialization }}=true

      - name: Execute Benchmark.KNetStreams.Buffered.Prefetch on Ubuntu with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}/bin/${{ matrix.framework }}/Benchmark.KNetStreams.Buffered.Prefetch.json /p:Use${{ matrix.serialization }}=true

      - name: Execute Benchmark.KNetReplicator on Ubuntu with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}/bin/${{ matrix.framework }}/Benchmark.KNetReplicator.json /p:Use${{ matrix.serialization }}=true

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: coredumps_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/coredump.*
          retention-days: 7

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: hs_err_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/**/hs_err_*
          retention-days: 7
         
  execute_tests_windows:
    needs: build_windows
    strategy:
      fail-fast: false
      matrix:
        serialization: [ 'Json', 'Protobuf', 'Avro' ]
        os: [ 'windows-2022' ]
        framework: [ 'net8.0', 'net9.0' ]
        jdk_vendor: [ 'temurin', 'zulu', 'microsoft', 'corretto', 'oracle' ]
        jdk_version: [ '17', '21' ] # only LTS versions
        
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_DbgEnableMiniDump: ${{ inputs.EnableProcessDump }}
      DOTNET_DbgMiniDumpType: ${{ inputs.ProcessDumpType }}
      DOTNET_DbgMiniDumpName: ${{ github.workspace }}/coredump.%p.dmp
      DOTNET_CreateDumpDiagnostics: ${{ inputs.EnableProcessDump }}
      DOTNET_CreateDumpVerboseDiagnostics: ${{ inputs.EnableVerboseDiagnosticProcessDump }}
      DOTNET_EnableCrashReport: ${{ inputs.EnableProcessDump }}
      DOTNET_CreateDumpLogToFile: ${{ github.workspace }}/coredump.diagnostic
      JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ENCODED_2_6_4 }}
      
    steps:
      - name: Restore KEFCore ${{ matrix.framework }} bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/${{ matrix.framework }}/
          key: KEFCore_${{ github.run_number }}_${{ github.run_attempt }}_${{ matrix.framework }}_bin_${{ github.sha }}
 
      - name: Set up JDK distribution
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}
          check-latest: true

      - name: Disable CET for dotnet process
        run: |
          reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\knet.exe" /v MitigationOptions /t REG_BINARY /d "0000000000000000000000000000002000" /f
          Get-ProcessMitigation -Name "knet.exe"

      - name: Download Procdump and prepare # see https://gist.github.com/Sedeniono/e6d6504e3bf0645937852ee5681ef9ee and https://learn.microsoft.com/it-it/sysinternals/downloads/procdump
        if: ${{ inputs.EnableProcessDump == 1 }}
        continue-on-error: true
        run: |
          C:\msys64\usr\bin\wget.exe https://download.sysinternals.com/files/Procdump.zip
          Expand-Archive -LiteralPath '${{ github.workspace }}\Procdump.zip' -DestinationPath ${{ github.workspace }}\Procdump -Force
          dir .\Procdump
          ${{ github.workspace }}\Procdump\procdump.exe -accepteula
          mkdir CrashDumpsDir
          ${{ github.workspace }}\Procdump\procdump.exe -ma -i ${{ github.workspace }}\CrashDumpsDir

      - name: Get last workflow run of KNet
        if: ${{ inputs.UseLastRepositoryBuildKNet == true }}
        shell: bash
        run: echo "KNET_LAST_RUN=$(curl -sL https://api.github.com/repos/masesgroup/KNet/actions/workflows/build.yaml/runs | jq -r '.workflow_runs[0].id?')" >> $GITHUB_ENV

      - name: Download KNetNuGet artifact
        if: ${{ inputs.UseLastRepositoryBuildKNet == true }}
        run: gh run download ${{ env.KNET_LAST_RUN }} --name KNetNuGet --repo masesgroup/KNet --dir KNetNuGet
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add local repo
        if: ${{ success() && inputs.UseLastRepositoryBuildKNet == true }}
        run: dotnet tool update -g MASES.KNetCLI --source "${{ github.workspace }}\KNetNuGet\"

      - name: Authenticate to GitHub
        if: ${{ inputs.UseLastRepositoryBuildKNet != true }}
        run: dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/masesgroup/index.json"
        
      - name: Download latest published version of KNetCLI
        if: ${{ inputs.UseLastRepositoryBuildKNet != true }}
        run: dotnet tool update -g MASES.KNetCLI --version 3.0.3

      - name: Prepare log files folder
        shell: pwsh
        run: New-Item -Path "${{ github.workspace }}" -Name "logfiles" -ItemType Directory

      - name: Start Kafka and execute Benchmark.KafkaStreams.Raw on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        shell: pwsh
        run: |
          knet storagetool format --standalone --ignore-formatted -t 6oTi4odMSVSmroqyy5rubw -c ${{ github.workspace }}/bin/${{ matrix.framework }}/windows_server.properties
          Start-Process -RSE ${{ github.workspace }}\logfiles\PWSH_kafka_err.log -RSO ${{ github.workspace }}\logfiles\PWSH_kafka_out.log -FilePath knet -ArgumentList ( 'kafkastart',  '-LogPath', '${{ github.workspace }}\logfiles\', '-Log4JConfiguration', '${{ github.workspace }}\bin\${{ matrix.framework }}\log4j2.yaml', '${{ github.workspace }}\bin\${{ matrix.framework }}\windows_server.properties' )
          dotnet ${{ github.workspace }}\bin\${{ matrix.framework }}\MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}\bin\${{ matrix.framework }}\Benchmark.KafkaStreams.Raw.json /p:Use${{ matrix.serialization }}=true

      - name: Forcibly stop knet on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: true
        shell: cmd
        run: wmic process where (commandline like "%%knet%%" and not name="wmic.exe") delete

      - uses: actions/upload-artifact@v4
        if: ${{ inputs.UploadServerLogs == true }}
        with:
          if-no-files-found: ignore
          name: Benchmark.KafkaStreams.Raw_Server_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/logfiles/
          retention-days: 7

      - name: Cleanup Kafka for ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: |
          Remove-Item -Path "${{ github.workspace }}\logfiles\*" -Recurse -Force
          Remove-Item -Path "${{ github.workspace }}\kraft-combined-logs\*" -Recurse -Force

      - name: Start Kafka and execute Benchmark.KafkaStreams.Buffered on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        shell: pwsh
        run: |
          knet storagetool format --standalone --ignore-formatted -t 6oTi4odMSVSmroqyy5rubw -c ${{ github.workspace }}/bin/${{ matrix.framework }}/windows_server.properties
          Start-Process -RSE ${{ github.workspace }}\logfiles\PWSH_kafka_err.log -RSO ${{ github.workspace }}\logfiles\PWSH_kafka_out.log -FilePath knet -ArgumentList ( 'kafkastart',  '-LogPath', '${{ github.workspace }}\logfiles\', '-Log4JConfiguration', '${{ github.workspace }}\bin\${{ matrix.framework }}\log4j2.yaml', '${{ github.workspace }}\bin\${{ matrix.framework }}\windows_server.properties' )
          dotnet ${{ github.workspace }}\bin\${{ matrix.framework }}\MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}\bin\${{ matrix.framework }}\Benchmark.KafkaStreams.Buffered.json /p:Use${{ matrix.serialization }}=true

      - name: Forcibly stop knet on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: true
        shell: cmd
        run: wmic process where (commandline like "%%knet%%" and not name="wmic.exe") delete

      - uses: actions/upload-artifact@v4
        if: ${{ inputs.UploadServerLogs == true }}
        with:
          if-no-files-found: ignore
          name: Benchmark.KafkaStreams.Buffered_Server_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/logfiles/
          retention-days: 7

      - name: Cleanup Kafka for ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: |
          Remove-Item -Path "${{ github.workspace }}\logfiles\*" -Recurse -Force
          Remove-Item -Path "${{ github.workspace }}\kraft-combined-logs\*" -Recurse -Force

      - name: Start Kafka and execute Benchmark.KNetStreams.Raw on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        shell: pwsh
        run: |
          knet storagetool format --standalone --ignore-formatted -t 6oTi4odMSVSmroqyy5rubw -c ${{ github.workspace }}/bin/${{ matrix.framework }}/windows_server.properties
          Start-Process -RSE ${{ github.workspace }}\logfiles\PWSH_kafka_err.log -RSO ${{ github.workspace }}\logfiles\PWSH_kafka_out.log -FilePath knet -ArgumentList ( 'kafkastart',  '-LogPath', '${{ github.workspace }}\logfiles\', '-Log4JConfiguration', '${{ github.workspace }}\bin\${{ matrix.framework }}\log4j2.yaml', '${{ github.workspace }}\bin\${{ matrix.framework }}\windows_server.properties' )
          dotnet ${{ github.workspace }}\bin\${{ matrix.framework }}\MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}\bin\${{ matrix.framework }}\Benchmark.KNetStreams.Raw.json /p:Use${{ matrix.serialization }}=true
      
      - name: Forcibly stop knet on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: true
        shell: cmd
        run: wmic process where (commandline like "%%knet%%" and not name="wmic.exe") delete

      - uses: actions/upload-artifact@v4
        if: ${{ inputs.UploadServerLogs == true }}
        with:
          if-no-files-found: ignore
          name: Benchmark.KNetStreams.Raw_Server_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/logfiles/
          retention-days: 7

      - name: Cleanup Kafka for ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: |
          Remove-Item -Path "${{ github.workspace }}\logfiles\*" -Recurse -Force
          Remove-Item -Path "${{ github.workspace }}\kraft-combined-logs\*" -Recurse -Force

      - name: Start Kafka and execute Benchmark.KNetStreams.Raw.Prefetch on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        shell: pwsh
        run: |
          knet storagetool format --standalone --ignore-formatted -t 6oTi4odMSVSmroqyy5rubw -c ${{ github.workspace }}/bin/${{ matrix.framework }}/windows_server.properties
          Start-Process -RSE ${{ github.workspace }}\logfiles\PWSH_kafka_err.log -RSO ${{ github.workspace }}\logfiles\PWSH_kafka_out.log -FilePath knet -ArgumentList ( 'kafkastart',  '-LogPath', '${{ github.workspace }}\logfiles\', '-Log4JConfiguration', '${{ github.workspace }}\bin\${{ matrix.framework }}\log4j2.yaml', '${{ github.workspace }}\bin\${{ matrix.framework }}\windows_server.properties' )
          dotnet ${{ github.workspace }}\bin\${{ matrix.framework }}\MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}\bin\${{ matrix.framework }}\Benchmark.KNetStreams.Raw.Prefetch.json /p:Use${{ matrix.serialization }}=true

      - name: Forcibly stop knet on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: true
        shell: cmd
        run: wmic process where (commandline like "%%knet%%" and not name="wmic.exe") delete

      - uses: actions/upload-artifact@v4
        if: ${{ inputs.UploadServerLogs == true }}
        with:
          if-no-files-found: ignore
          name: Benchmark.KNetStreams.Raw.Prefetch_Server_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/logfiles/
          retention-days: 7

      - name: Cleanup Kafka for ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: |
          Remove-Item -Path "${{ github.workspace }}\logfiles\*" -Recurse -Force
          Remove-Item -Path "${{ github.workspace }}\kraft-combined-logs\*" -Recurse -Force

      - name: Start Kafka and execute Benchmark.KNetStreams.Buffered on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        shell: pwsh
        run: |
          knet storagetool format --standalone --ignore-formatted -t 6oTi4odMSVSmroqyy5rubw -c ${{ github.workspace }}/bin/${{ matrix.framework }}/windows_server.properties
          Start-Process -RSE ${{ github.workspace }}\logfiles\PWSH_kafka_err.log -RSO ${{ github.workspace }}\logfiles\PWSH_kafka_out.log -FilePath knet -ArgumentList ( 'kafkastart',  '-LogPath', '${{ github.workspace }}\logfiles\', '-Log4JConfiguration', '${{ github.workspace }}\bin\${{ matrix.framework }}\log4j2.yaml', '${{ github.workspace }}\bin\${{ matrix.framework }}\windows_server.properties' )
          dotnet ${{ github.workspace }}\bin\${{ matrix.framework }}\MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}\bin\${{ matrix.framework }}\Benchmark.KNetStreams.Buffered.json /p:Use${{ matrix.serialization }}=true

      - name: Forcibly stop knet on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: true
        shell: cmd
        run: wmic process where (commandline like "%%knet%%" and not name="wmic.exe") delete

      - uses: actions/upload-artifact@v4
        if: ${{ inputs.UploadServerLogs == true }}
        with:
          if-no-files-found: ignore
          name: Benchmark.KNetStreams.Buffered_Server_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/logfiles/
          retention-days: 7

      - name: Cleanup Kafka for ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: |
          Remove-Item -Path "${{ github.workspace }}\logfiles\*" -Recurse -Force
          Remove-Item -Path "${{ github.workspace }}\kraft-combined-logs\*" -Recurse -Force

      - name: Start Kafka and execute Benchmark.KNetStreams.Buffered.Prefetch on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        shell: pwsh
        run: |
          knet storagetool format --standalone --ignore-formatted -t 6oTi4odMSVSmroqyy5rubw -c ${{ github.workspace }}/bin/${{ matrix.framework }}/windows_server.properties
          Start-Process -RSE ${{ github.workspace }}\logfiles\PWSH_kafka_err.log -RSO ${{ github.workspace }}\logfiles\PWSH_kafka_out.log -FilePath knet -ArgumentList ( 'kafkastart',  '-LogPath', '${{ github.workspace }}\logfiles\', '-Log4JConfiguration', '${{ github.workspace }}\bin\${{ matrix.framework }}\log4j2.yaml', '${{ github.workspace }}\bin\${{ matrix.framework }}\windows_server.properties' )
          dotnet ${{ github.workspace }}\bin\${{ matrix.framework }}\MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}\bin\${{ matrix.framework }}\Benchmark.KNetStreams.Buffered.Prefetch.json /p:Use${{ matrix.serialization }}=true

      - name: Forcibly stop knet on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: true
        shell: cmd
        run: wmic process where (commandline like "%%knet%%" and not name="wmic.exe") delete

      - uses: actions/upload-artifact@v4
        if: ${{ inputs.UploadServerLogs == true }}
        with:
          if-no-files-found: ignore
          name: Benchmark.KNetStreams.Buffered.Prefetch_Server_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/logfiles/
          retention-days: 7

      - name: Cleanup Kafka for ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: |
          dir ${{ github.workspace }}
          Remove-Item -Path "${{ github.workspace }}\logfiles\*" -Recurse -Force
          Remove-Item -Path "${{ github.workspace }}\kraft-combined-logs\*" -Recurse -Force

      - name: Start Kafka and execute Benchmark.KNetReplicator on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        shell: pwsh
        run: |
          knet storagetool format --standalone --ignore-formatted -t 6oTi4odMSVSmroqyy5rubw -c ${{ github.workspace }}/bin/${{ matrix.framework }}/windows_server.properties
          Start-Process -RSE ${{ github.workspace }}\logfiles\PWSH_kafka_err.log -RSO ${{ github.workspace }}\logfiles\PWSH_kafka_out.log -FilePath knet -ArgumentList ( 'kafkastart',  '-LogPath', '${{ github.workspace }}\logfiles\', '-Log4JConfiguration', '${{ github.workspace }}\bin\${{ matrix.framework }}\log4j2.yaml', '${{ github.workspace }}\bin\${{ matrix.framework }}\windows_server.properties' )
          dotnet ${{ github.workspace }}\bin\${{ matrix.framework }}\MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}\bin\${{ matrix.framework }}\Benchmark.KNetReplicator.json /p:Use${{ matrix.serialization }}=true

      - name: Forcibly stop knet on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: true
        shell: cmd
        run: wmic process where (commandline like "%%knet%%" and not name="wmic.exe") delete

      - uses: actions/upload-artifact@v4
        if: ${{ inputs.UploadServerLogs == true }}
        with:
          if-no-files-found: ignore
          name: Benchmark.KNetStreams.Buffered.KNetReplicator_Server_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/logfiles/
          retention-days: 7

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: CrashDumps_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: .\CrashDumpsDir\*
          retention-days: 7

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: Coredumps_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/coredump.*
          retention-days: 7

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: hs_err_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/**/hs_err_*
          retention-days: 7

  execute_tests_macos:
    needs: build_windows
    strategy:
      fail-fast: false
      matrix:
        serialization: [ 'Json', 'Protobuf', 'Avro' ]
        os: [ 'macos-14' ]
        framework: [ 'net8.0', 'net9.0' ]
        jdk_vendor: [ 'temurin', 'zulu', 'microsoft', 'corretto', 'oracle' ]
        jdk_version: [ '17', '21' ] # only LTS versions
        
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_DbgEnableMiniDump: ${{ inputs.EnableProcessDump }}
      DOTNET_DbgMiniDumpType: ${{ inputs.ProcessDumpType }}
      DOTNET_DbgMiniDumpName: ${{ github.workspace }}/coredump.%p.dmp
      DOTNET_CreateDumpDiagnostics: ${{ inputs.EnableProcessDump }}
      DOTNET_CreateDumpVerboseDiagnostics: ${{ inputs.EnableVerboseDiagnosticProcessDump }}
      DOTNET_EnableCrashReport: ${{ inputs.EnableProcessDump }}
      DOTNET_CreateDumpLogToFile: ${{ github.workspace }}/coredump.diagnostic
      JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ENCODED_2_6_4 }}
      
    steps:
      - name: Restore KEFCore ${{ matrix.framework }} bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/${{ matrix.framework }}/
          key: KEFCore_${{ github.run_number }}_${{ github.run_attempt }}_${{ matrix.framework }}_bin_${{ github.sha }}
 
      - name: Set up JDK distribution
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}
          check-latest: true

      - name: Get last workflow run of KNet
        if: ${{ inputs.UseLastRepositoryBuildKNet == true }}
        shell: bash
        run: echo "KNET_LAST_RUN=$(curl -sL https://api.github.com/repos/masesgroup/KNet/actions/workflows/build.yaml/runs | jq -r '.workflow_runs[0].id?')" >> $GITHUB_ENV

      - name: Download KNetNuGet artifact
        if: ${{ inputs.UseLastRepositoryBuildKNet == true }}
        run: gh run download ${{ env.KNET_LAST_RUN }} --name KNetNuGet --repo masesgroup/KNet --dir KNetNuGet
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add local repo
        if: ${{ success() && inputs.UseLastRepositoryBuildKNet == true }}
        run: dotnet tool update -g MASES.KNetCLI --source "${{ github.workspace }}\KNetNuGet\"

      - name: Authenticate to GitHub
        if: ${{ inputs.UseLastRepositoryBuildKNet != true }}
        run: dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/masesgroup/index.json"
        
      - name: Download latest published version of KNetCLI
        if: ${{ inputs.UseLastRepositoryBuildKNet != true }}
        run: dotnet tool update -g MASES.KNetCLI --version 3.0.3

      - name: Prepare Kafka on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
        run: knet storagetool format --standalone --ignore-formatted -t 6oTi4odMSVSmroqyy5rubw -c ${{ github.workspace }}/bin/${{ matrix.framework }}/server.properties

      - name: Start Kafka on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
        shell: pwsh
        run: |
          New-Item -Path "${{ github.workspace }}" -Name "logfiles" -ItemType Directory
          Start-Process -RSE ${{ github.workspace }}/logfiles/PWSH_kafka_err.log -RSO ${{ github.workspace }}/logfiles/PWSH_kafka_out.log -FilePath knet -ArgumentList ( 'kafkastart',  '-LogPath', '${{ github.workspace }}/logfiles/', '-Log4JConfiguration', '${{ github.workspace }}/bin/${{ matrix.framework }}/log4j2.yaml', '${{ github.workspace }}/bin/${{ matrix.framework }}/server.properties' )

      - name: Execute Benchmark.KafkaStreams.Raw on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}/bin/${{ matrix.framework }}/Benchmark.KafkaStreams.Raw.json /p:Use${{ matrix.serialization }}=true

      - uses: actions/upload-artifact@v4
        if: ${{ inputs.UploadServerLogs == true }}
        with:
          if-no-files-found: ignore
          name: Benchmark.KafkaStreams.Raw_Server_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/logfiles/
          retention-days: 7

      - name: Execute Benchmark.KafkaStreams.Buffered on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}/bin/${{ matrix.framework }}/Benchmark.KafkaStreams.Buffered.json /p:Use${{ matrix.serialization }}=true

      - uses: actions/upload-artifact@v4
        if: ${{ inputs.UploadServerLogs == true }}
        with:
          if-no-files-found: ignore
          name: Benchmark.KafkaStreams.Buffered_Server_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/logfiles/
          retention-days: 7

      - name: Execute Benchmark.KNetStreams.Raw on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}/bin/${{ matrix.framework }}/Benchmark.KNetStreams.Raw.json /p:Use${{ matrix.serialization }}=true

      - uses: actions/upload-artifact@v4
        if: ${{ inputs.UploadServerLogs == true }}
        with:
          if-no-files-found: ignore
          name: Benchmark.KNetStreams.Raw_Server_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/logfiles/
          retention-days: 7

      - name: Execute Benchmark.KNetStreams.Raw.Prefetch on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}/bin/${{ matrix.framework }}/Benchmark.KNetStreams.Raw.Prefetch.json /p:Use${{ matrix.serialization }}=true

      - uses: actions/upload-artifact@v4
        if: ${{ inputs.UploadServerLogs == true }}
        with:
          if-no-files-found: ignore
          name: Benchmark.KNetStreams.Raw.Prefetch_Server_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/logfiles/
          retention-days: 7

      - name: Execute Benchmark.KNetStreams.Buffered on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}/bin/${{ matrix.framework }}/Benchmark.KNetStreams.Buffered.json /p:Use${{ matrix.serialization }}=true

      - uses: actions/upload-artifact@v4
        if: ${{ inputs.UploadServerLogs == true }}
        with:
          if-no-files-found: ignore
          name: Benchmark.KNetStreams.Buffered_Server_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/logfiles/
          retention-days: 7

      - name: Execute Benchmark.KNetStreams.Buffered.Prefetch on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}/bin/${{ matrix.framework }}/Benchmark.KNetStreams.Buffered.Prefetch.json /p:Use${{ matrix.serialization }}=true

      - uses: actions/upload-artifact@v4
        if: ${{ inputs.UploadServerLogs == true }}
        with:
          if-no-files-found: ignore
          name: Benchmark.KNetStreams.Buffered.Prefetch_Server_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/logfiles/
          retention-days: 7

      - name: Execute Benchmark.KNetReplicator on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }} based on ${{ matrix.serialization }}
        continue-on-error: ${{ inputs.ForceContinueOnError == true }}
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/MASES.EntityFrameworkCore.KNet.Test.Benchmark.dll ${{ github.workspace }}/bin/${{ matrix.framework }}/Benchmark.KNetReplicator.json /p:Use${{ matrix.serialization }}=true

      - uses: actions/upload-artifact@v4
        if: ${{ inputs.UploadServerLogs == true }}
        with:
          if-no-files-found: ignore
          name: Benchmark.KNetReplicator_Server_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/logfiles/
          retention-days: 7

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: Coredumps_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/coredump.*
          retention-days: 7

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: hs_err_${{ matrix.serialization }}_${{ matrix.os }}_${{ matrix.framework }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/**/hs_err_*
          retention-days: 7

  final_cleanup:
    needs: [ execute_tests_linux, execute_tests_windows, execute_tests_macos ]
    if: "always()"
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5
        with:
          fetch-depth: '1'

      - name: Clear caches
        run: |
          gh extension install actions/gh-actions-cache
          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list --key KEFCore_${{ github.run_number }}_${{ github.run_attempt }} | cut -f 1 )
          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
